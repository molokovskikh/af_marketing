@using Marketing.Models
@using Marketing.ViewModels
@model PromotionViewModel

@{
  var catalogList = (List<Marketing.ViewModels.ViewModelList>)ViewBag.CatalogList;
  ViewBag.Title = $"Редактирование акции \"{Model.Promotion.Name}\"";
  var tableNameForProductGet = PromotionTableSelectorViewModel.RequestType.ProductsListToGet.ToString();
  var tableNameForProductSet = PromotionTableSelectorViewModel.RequestType.ProductsListToSet.ToString();
  var tableNameForSupplierGet = PromotionTableSelectorViewModel.RequestType.SuppliersListToGet.ToString();
  var tableNameForSupplierSet = PromotionTableSelectorViewModel.RequestType.SuppliersListToSet.ToString();

}

<div class="form-group">
    <ol class="breadcrumb">
        <li>
            <a href="@Url.Action("Index", "Home")">Меню</a>
        </li>
        <li>
            <a href="@Url.Action("Index", "Marketing")">Маркетинговые мероприятия</a>
        </li>
        <li>
            <a href="@Url.Action("PromotionList", "Marketing", new {id = Model.Promotion.Producer.Id})">@Model.Promotion.Producer.Producer.Name</a>
        </li>
        <li class="active">@ViewBag.Title</li>
    </ol>
</div>
<h2>@ViewBag.Title</h2>

@Html.Hidden(tableNameForProductSet + "ToSelectList", "")
@Html.Hidden(tableNameForSupplierSet + "ToSelectList", "")
@Html.Hidden(tableNameForProductSet + "ToRemoveList", "")
@Html.Hidden(tableNameForSupplierSet + "ToRemoveList", "")

@Html.Hidden(tableNameForProductSet + "ToSelectItem", "")
@Html.Hidden(tableNameForSupplierSet + "ToSelectItem", "")
@Html.Hidden(tableNameForProductSet + "ToRemoveItem", "")
@Html.Hidden(tableNameForSupplierSet + "ToRemoveItem", "")

<form action="@Url.Action("PromotionrEditGet")" method="post" novalidate="novalidate">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Promotion.Id)


    @Html.Hidden(tableNameForProductSet + "List", Model.ProductsListToSetList)
    @Html.Hidden(tableNameForSupplierSet + "List", Model.SuppliersListToSetList)

    <script type="text/javascript">
        //Здесь нужно собать все значения, которые должны быть учтены при фильтрации
        function @(tableNameForProductGet)BeginCallback(s, e) {
            e.customArgs["id"] = @Model.Promotion.Id;
            e.customArgs["type"] = @((int) PromotionTableSelectorViewModel.RequestType.ProductsListToGet);
            e.customArgs["list"] = $("[name='@(tableNameForProductSet + "List")']").val();
        }

        function @(tableNameForProductSet)BeginCallback(s, e) {
            e.customArgs["id"] = @Model.Promotion.Id;
            e.customArgs["type"] = @((int) PromotionTableSelectorViewModel.RequestType.ProductsListToSet);
            e.customArgs["list"] = $("[name='@(tableNameForProductSet + "List")']").val();
        }

        function @(tableNameForSupplierGet)BeginCallback(s, e) {
            e.customArgs["id"] = @Model.Promotion.Id;
            e.customArgs["type"] = @((int) PromotionTableSelectorViewModel.RequestType.SuppliersListToGet);
        	e.customArgs["list"] = $("[name='@(tableNameForSupplierSet + "List")']").val();
        	e.customArgs["regionList"] =  $("[name='regionIdList']").val();
        }

        function @(tableNameForSupplierSet)BeginCallback(s, e) {
            e.customArgs["id"] = @Model.Promotion.Id;
            e.customArgs["type"] = @((int) PromotionTableSelectorViewModel.RequestType.SuppliersListToSet);
            e.customArgs["list"] = $("[name='@(tableNameForSupplierSet + "List")']").val();
        }


        //Здесь нужно собать все значения, которые должны быть учтены при фильтрации
        function @(tableNameForProductGet)FocusedRowChanged(s, e) {
            s.GetRowValues(s.GetFocusedRowIndex(), 'Value', function(value) {
                $("[name='@(tableNameForProductSet + "ToSelectItem")']").val(value);
            });
        }
        function @(tableNameForProductSet)FocusedRowChanged(s, e) {
            s.GetRowValues(s.GetFocusedRowIndex(), 'Value', function(value) {
                $("[name='@(tableNameForProductSet + "ToRemoveItem")']").val(value);
            });
        }
        function @(tableNameForSupplierGet)FocusedRowChanged(s, e) {
            s.GetRowValues(s.GetFocusedRowIndex(), 'Value', function(value) {
                $("[name='@(tableNameForSupplierSet + "ToSelectItem")']").val(value);
            });
        }
        function @(tableNameForSupplierSet)FocusedRowChanged(s, e) {
            s.GetRowValues(s.GetFocusedRowIndex(), 'Value', function(value) {
                $("[name='@(tableNameForSupplierSet + "ToRemoveItem")']").val(value);
            });
        }


        function @(tableNameForProductGet)SelectionChanged(s, e) {
            s.GetSelectedFieldValues("Value", function(values) { $("[name='@(tableNameForProductSet + "ToSelectList")']").val(values.join()); });
        }

        function @(tableNameForProductSet)SelectionChanged(s, e) {
            s.GetSelectedFieldValues("Value", function(values) { $("[name='@(tableNameForProductSet + "ToRemoveList")']").val(values.join()); });
        }

        function @(tableNameForSupplierGet)SelectionChanged(s, e) {
            s.GetSelectedFieldValues("Value", function(values) { $("[name='@(tableNameForSupplierSet + "ToSelectList")']").val(values.join()); });
        }

        function @(tableNameForSupplierSet)SelectionChanged(s, e) {
            s.GetSelectedFieldValues("Value", function(values) { $("[name='@(tableNameForSupplierSet + "ToRemoveList")']").val(values.join()); });
        }


        Array.prototype.getDiff = function(a) {
            return this.filter(function(i) { return a.indexOf(i) < 0; });
        };

        function InitProductAdd() {
            var currentList = $("[name='@(tableNameForProductSet + "List")']").val();
            currentList = currentList == "" ? new Array() : currentList.split(',');
            var selectList = $("[name='@(tableNameForProductSet + "ToSelectList")']").val();
            selectList = selectList == "" ? new Array() : selectList.split(',');
            var focusedItem = $("[name='@(tableNameForProductSet + "ToSelectItem")']").val();
            if (selectList.length == 0 && focusedItem != undefined && focusedItem != "") {
                selectList.push(focusedItem);
            }
            $("[name='@(tableNameForProductSet + "List")']").val((currentList.getDiff(selectList).concat(selectList)).join());
            @(tableNameForProductSet).PerformCallback();
            @(tableNameForProductGet).UnselectAllRowsOnPage();
						$("[name='@(tableNameForProductSet + "ToSelectList")']").val("");
        	$("[name='@(tableNameForProductSet + "ToSelectItem")']").val("");
            @(tableNameForProductGet).PerformCallback();
        }

        function InitProductRemove() {
            var currentList = $("[name='@(tableNameForProductSet + "List")']").val();
            currentList = currentList == "" ? new Array() : currentList.split(',');
            var removeList = $("[name='@(tableNameForProductSet + "ToRemoveList")']").val();
            removeList = removeList == "" ? new Array() : removeList.split(',');
            var focusedItem = $("[name='@(tableNameForProductSet + "ToRemoveItem")']").val();
            if (removeList.length == 0 && focusedItem != undefined && focusedItem != "") {
                removeList.push(focusedItem);
            }
            $("[name='@(tableNameForProductSet + "List")']").val(currentList.getDiff(removeList).join());
            @(tableNameForProductSet).PerformCallback();
						$("[name='@(tableNameForProductSet + "ToRemoveList")']").val("");
        	$("[name='@(tableNameForProductSet + "ToRemoveItem")']").val("");
            @(tableNameForProductGet).PerformCallback();
        }

        function InitSupplierAdd() {
            var currentList = $("[name='@(tableNameForSupplierSet + "List")']").val();
            currentList = currentList == "" ? new Array() : currentList.split(',');
            var selectList = $("[name='@(tableNameForSupplierSet + "ToSelectList")']").val();
            selectList = selectList == "" ? new Array() : selectList.split(',');
            var focusedItem = $("[name='@(tableNameForSupplierSet + "ToSelectItem")']").val();
            if (selectList.length == 0 && focusedItem != undefined && focusedItem != "") {
                selectList.push(focusedItem);
            }
            $("[name='@(tableNameForSupplierSet + "List")']").val((currentList.getDiff(selectList).concat(selectList)).join());

            @(tableNameForSupplierSet).PerformCallback();
            @(tableNameForSupplierGet).UnselectAllRowsOnPage();
						$("[name='@(tableNameForSupplierSet + "ToSelectList")']").val("");
        	$("[name='@(tableNameForSupplierSet + "ToSelectItem")']").val("");
            @(tableNameForSupplierGet).PerformCallback();
        }

        function InitSupplierRemove() {
            var currentList = $("[name='@(tableNameForSupplierSet + "List")']").val();
            currentList = currentList == "" ? new Array() : currentList.split(',');
            var removeList = $("[name='@(tableNameForSupplierSet + "ToRemoveList")']").val();
            removeList = removeList == "" ? new Array() : removeList.split(',');
            var focusedItem = $("[name='@(tableNameForSupplierSet + "ToRemoveItem")']").val();
            if (removeList.length == 0 && focusedItem != undefined && focusedItem != "") {
                removeList.push(focusedItem);
            }
            $("[name='@(tableNameForSupplierSet + "List")']").val(currentList.getDiff(removeList).join());
            @(tableNameForSupplierSet).PerformCallback();
						$("[name='@(tableNameForSupplierSet + "ToRemoveList")']").val("");
        	$("[name='@(tableNameForSupplierSet + "ToRemoveItem")']").val("");
            @(tableNameForSupplierGet).PerformCallback();
        }

        $(function() {
            $("#filterProductsRawGet").click(function() {InitProductAdd();});
            $("#filterProductsRawRemove").click(function() {InitProductRemove();});
            $("#filterSuppliersRawGet").click(function() {InitSupplierAdd();});
            $("#filterSuppliersRawRemove").click(function() {InitSupplierRemove();});
        });
    </script>


    <div class="form-group">
        <button type="submit" class="btn btn-primary">Сохранить</button>
    </div>
    <h3>Товары:</h3>
    <div class="container-fluid">
        <div class="row">
            <div class="form-group">
                <div class="col-xs-6 col-md-4">

                    @Html.Partial("partials/_PromotionEditListGridView", new PromotionTableSelectorViewModel
               {
                   Name = tableNameForProductGet,
                   Caption = "Доступные",
                   ItemsList = Model.ProductListGet.ItemsList,
                   Height = Model.ProductListGet.Height
               })

                </div>
                <div class="col-xs-6 col-md-4 text-center">
                    <div class="row">
                        <div class="form-group">
                            <button type="button" id="filterProductsRawGet" class="btn btn-primary glyphicon glyphicon-arrow-right button-arrow"></button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group">
                            <button type="button" id="filterProductsRawRemove" class="btn btn-primary glyphicon glyphicon glyphicon-arrow-left button-arrow"></button>
                        </div>
                    </div>
                </div>
                <div class="col-xs-6 col-md-4">

                    @Html.Partial("partials/_PromotionEditListGridView", new PromotionTableSelectorViewModel
               {
                   Name = tableNameForProductSet,
                   Caption = "Участвующие в акции",
                   ItemsList = Model.ProductListSet.ItemsList,
                   Height = Model.ProductListSet.Height
               })

                </div>
            </div>
        </div>
    </div>

    <h3>Поставщики:</h3>

    <div class="form-group">
        @Html.Partial("partials/_PromotionEditRegionFilterData", Model.RegionList)
        @Html.Partial("partials/_PromotionEditRegionFilterLogic", Model.RegionList)
    </div>
    <div class="container-fluid">
        <div class="row">
            <div class="form-group">
                <div class="col-xs-6 col-md-4 tab">

                    @Html.Partial("partials/_PromotionEditListGridView", new PromotionTableSelectorViewModel
               {
                   Name = tableNameForSupplierGet,
                   Caption = "Доступные",
                   ItemsList = Model.SupplierListGet.ItemsList,
                   Height = Model.SupplierListGet.Height
               })
                </div>
                <div class="col-xs-6 col-md-4 text-center">
                    <div class="row">
                        <div class="form-group">
                            <button type="button" id="filterSuppliersRawGet" class="btn btn-primary glyphicon glyphicon-arrow-right button-arrow"></button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group">
                            <button type="button" id="filterSuppliersRawRemove" class="btn btn-primary glyphicon glyphicon glyphicon-arrow-left button-arrow"></button>
                        </div>
                    </div>
                </div>
                <div class="col-xs-6 col-md-4">

                    @Html.Partial("partials/_PromotionEditListGridView", new PromotionTableSelectorViewModel
               {
                   Name = tableNameForSupplierSet,
                   Caption = "Участвующие в акции",
                   ItemsList = Model.SupplierListSet.ItemsList,
									 Height = Model.SupplierListSet.Height
									
               })

                </div>
            </div>
        </div>
</div>
		</form>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
