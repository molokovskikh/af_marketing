@using System.Web.UI.WebControls
@model Marketing.ViewModels.DateRangeViewModel

@Html.Hidden("DateStarted", Model.DateBegin)
@Html.Hidden("DateFinished", Model.DateEnd)

<script type="text/javascript">
	function DateEndUpdate(s, e) {
	    var rawDate = s.GetText();
	    if (rawDate != undefined && rawDate != '') {
	    	$("[id='DateFinished']").val(rawDate + ' 00:00:00');
	        DateBegin.SetMaxDate(s.GetValue());
	        if (DateBegin.GetValue() > s.GetValue()) {
	            DateBegin.SetValue(s.GetValue());
	        }
	    }
	}
	function DateBeginUpdate(s, e) {
	    var rawDate = s.GetText();
	    if (rawDate != undefined && rawDate != '') {
	    	$("[id='DateStarted']").val(rawDate + ' 00:00:00');
	        DateEnd.SetMinDate(s.GetValue());
	        if (DateEnd.GetValue() < s.GetValue()) {
	            DateEnd.SetValue(s.GetValue());
	        }
	    }
	}
	$(function(){
	$("input").removeAttr("data-val-date");
	});
</script>
@Html.DevExpress().FormLayout(settings => {
    settings.Name = "dateRange";
    settings.RequiredMarkDisplayMode = RequiredMarkMode.RequiredOnly;
    settings.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Left;
    settings.ControlStyle.CssClass = "pickerFormLayout";
    settings.Width = Unit.Pixel(236);

    var pickerGroup = settings.Items.AddGroupItem(itemSettings => {
        itemSettings.Caption = "";
        itemSettings.ColCount = 1;
        itemSettings.AlignItemCaptions = false;
        itemSettings.ParentContainerStyle.CssClass = "pickerGroupContainer";
        itemSettings.GroupBoxDecoration = GroupBoxDecoration.None;
    });

    var newItem = pickerGroup.Items.Add(item => Model.DateBegin, itemSettings => ConfigureDateEditItem(itemSettings));
    newItem.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
    newItem.Width = Unit.Pixel(234);
    newItem.NestedExtensionSettings.Width = Unit.Pixel(234);
    newItem.Caption = "-с-:";
    var dateEditSettings = (DateEditSettings) newItem.NestedExtensionSettings;
    dateEditSettings.Properties.ClientSideEvents.DateChanged = "DateBeginUpdate";
    dateEditSettings.Properties.CalendarProperties.DisabledDates.AddRange(Model.DateBeginDisabledDates ?? new List<DateTime>());
    if (Model.DateBeginMax != null)
        dateEditSettings.Properties.CalendarProperties.MaxDate = Model.DateBeginMax.Value;
    if (Model.DateBeginMin != null)
        dateEditSettings.Properties.CalendarProperties.MinDate = Model.DateBeginMin.Value;
    else
        dateEditSettings.Properties.CalendarProperties.MinDate = DateTime.MinValue;

    pickerGroup = settings.Items.AddGroupItem(itemSettings => {
        itemSettings.Caption = "";
        itemSettings.ColCount = 1;
        itemSettings.AlignItemCaptions = false;
        itemSettings.GroupBoxDecoration = GroupBoxDecoration.None;
    });

    newItem = pickerGroup.Items.Add(item => Model.DateEnd, itemSettings => ConfigureDateEditItem(itemSettings));
    newItem.Width = Unit.Pixel(234);
    newItem.NestedExtensionSettings.Width = Unit.Pixel(234);

    newItem.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
    newItem.Caption = "по:";
    dateEditSettings = (DateEditSettings) newItem.NestedExtensionSettings;
    dateEditSettings.Properties.ClientSideEvents.DateChanged = "DateEndUpdate";
    dateEditSettings.Properties.CalendarProperties.DisabledDates.AddRange(Model.DateEndDisabledDates ?? new List<DateTime>());
    if (Model.DateEndMax != null)
      dateEditSettings.Properties.CalendarProperties.MaxDate = Model.DateEndMax.Value;
    if (Model.DateEndMin != null)
      dateEditSettings.Properties.CalendarProperties.MinDate = (DateTime)Model.DateEndMin;
		else
			dateEditSettings.Properties.CalendarProperties.MinDate = Model.DateBeginMin ?? DateTime.MinValue;
}).GetHtml()

@functions{
  Function<DateEditSettings, MVCxFormLayoutItem> ConfigureDateEditItem = itemSettings =>
  {
      itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
      var dateEditSettings = (DateEditSettings)itemSettings.NestedExtensionSettings;
      dateEditSettings.ShowModelErrors = true;
      dateEditSettings.Properties.ValidationSettings.Display = Display.Dynamic;
      dateEditSettings.Properties.ValidationSettings.SetFocusOnError = true;
      dateEditSettings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
      dateEditSettings.Properties.ValidationSettings.CausesValidation = true;
      dateEditSettings.Properties.CalendarProperties.Columns = 2;
      dateEditSettings.Properties.CalendarProperties.ShowShadow = false;
      dateEditSettings.Properties.CalendarProperties.ShowClearButton = false;
      return dateEditSettings;
  };
}