@using System.Web.UI.WebControls
@using Marketing.ViewModels
@using Marketing.Models
@model PromotionConditionsViewModel
@{
  Html.EnableClientValidation();
  Html.EnableUnobtrusiveJavaScript();
}

@Html.DevExpress().GridView(settings =>
{
    settings.Name = "gridConditions";
    settings.CallbackRouteValues = new { Action = "GetConditionsGridData", Controller = "Marketing", Id = Model.Promotion.Id };
    settings.PreviewEncodeHtml = false;
    settings.EncodeHtml = false;
    settings.KeyFieldName = "PromotionId;ConditionId";
    settings.Width = Unit.Percentage(100);

    settings.SettingsEditing.BatchUpdateRouteValues = new { Action = "EditConditionsBatch", Controller = "Marketing", Id = Model.Promotion.Id };
    settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
    settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
    settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.FocusedCellClick;
    settings.CellEditorInitialize = (s, e) =>
    {
        ASPxEdit editor = (ASPxEdit)e.Editor;
        editor.ValidationSettings.Display = Display.None;
    };
    settings.SettingsEditing.BatchEditSettings.ShowConfirmOnLosingChanges = false;

    settings.Columns.Add(column =>
    {
        column.FieldName = "ProductName";
        column.PropertiesEdit.EncodeHtml = false;
        column.Caption = "Наименование";
        column.ReadOnly = true;
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "ProducerName";
        column.Caption = "Производитель";
        column.ReadOnly = true;
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "МНН";
        column.ReadOnly = true;
        column.SetDataItemTemplateContent(c =>
        {
            var value = DataBinder.Eval(c.DataItem, "MnnId")?.ToString();
            var text = DataBinder.Eval(c.DataItem, "Mnn")?.ToString();
            string htmlContent = string.IsNullOrEmpty(text) ? "" : $"<a href=\"javascript:void(0);\" onclick=\"viewProductsByMnn({value}, '{text}');\">{text}</a>";
            ViewContext.Writer.Write(htmlContent);
        });
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "Предлагать заменой для...";
        column.ReadOnly = true;
        column.SetDataItemTemplateContent(c =>
        {
            var value = DataBinder.Eval(c.DataItem, "ConditionId")?.ToString();
            var text = DataBinder.Eval(c.DataItem, "Replacements")?.ToString();
            if (string.IsNullOrEmpty(text))
                text = "[Создать замены]";
            string htmlContent = string.IsNullOrEmpty(text) ? "" : $"<a href=\"{Url.Action("EditReplacements", new { id = value })}\">{text}</a>";
            ViewContext.Writer.Write(htmlContent);
        });
    });
    if (Model.Promotion.CalculationUnit == CalculationUnit.CipPrice)
        settings.Columns.Add(column =>
        {
            column.FieldName = "Price";
            column.PropertiesEdit.EncodeHtml = false;
            column.Caption = "Учётная цена";
            column.EditorProperties().TextBox(p =>
            {
                p.DisplayFormatInEditMode = true;
            });
        });
    else if (!Model.Promotion.SameConditions && Model.Promotion.CalculationUnit == CalculationUnit.Packages)
        settings.Columns.Add(column =>
        {
            column.FieldName = "Quantity";
            column.PropertiesEdit.EncodeHtml = false;
            column.Caption = "Упаковок";
            column.EditorProperties().SpinEdit(p =>
            {
                p.NumberType = SpinEditNumberType.Integer;
                p.DisplayFormatInEditMode = true;
                p.Increment = 1;
                p.LargeIncrement = 10;
            });
        });
    if (!Model.Promotion.SameConditions)
    {
        if (Model.Promotion.FeeBase == FeeBase.Percentage)
        {
            settings.Columns.Add(column =>
            {
                column.FieldName = "DealerPercent";
                column.PropertiesEdit.EncodeHtml = false;
                column.Caption = "% бонуса по договору";
                column.EditorProperties().SpinEdit(p =>
                {
                    p.NumberType = SpinEditNumberType.Float;
                    p.DisplayFormatInEditMode = true;
                    p.MinValue = 0;
                    p.Increment = 0.1m;
                    p.LargeIncrement = 1;
                });
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "MemberPercent";
                column.PropertiesEdit.EncodeHtml = false;
                column.Caption = "% бонуса для участника";
                column.EditorProperties().SpinEdit(p =>
                {
                    p.NumberType = SpinEditNumberType.Float;
                    p.DisplayFormatInEditMode = true;
                    p.MinValue = 0;
                    p.Increment = 0.1m;
                    p.LargeIncrement = 1;
                });
            });
        }
        else
        {
            settings.Columns.Add(column =>
            {
                column.FieldName = "DealerSum";
                column.PropertiesEdit.EncodeHtml = false;
                column.Caption = "Сумма по договору";
                column.EditorProperties().SpinEdit(p =>
                {
                    p.NumberType = SpinEditNumberType.Float;
                    p.DisplayFormatInEditMode = true;
                    p.MinValue = 0;
                    p.Increment = 10m;
                    p.LargeIncrement = 100m;
                });
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "MemberSum";
                column.PropertiesEdit.EncodeHtml = false;
                column.Caption = "Сумма для участника";
                column.EditorProperties().SpinEdit(p =>
                {
                    p.NumberType = SpinEditNumberType.Float;
                    p.DisplayFormatInEditMode = true;
                    p.MinValue = 0;
                    p.Increment = 10m;
                    p.LargeIncrement = 100m;
                });
            });
        }
    }

    settings.SettingsPager.PageSize = 20;
    settings.SettingsSearchPanel.Visible = true;
    settings.SettingsPager.Position = PagerPosition.TopAndBottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50", "100", "150", "200" };
}).Bind(Model.Conditions).GetHtml()
